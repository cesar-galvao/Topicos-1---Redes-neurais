}
ffwd(x, theta)
tinytex::install_tinytex()
#| label: geracao-dados
### Gerando dados "observados"
set.seed(1.2024)
m.obs <- 100000
dados <- tibble(x1.obs=runif(m.obs, -3, 3),
x2.obs=runif(m.obs, -3, 3)) |>
mutate(mu=abs(x1.obsˆ3 - 30*sin(x2.obs) + 10),
y=rnorm(m.obs, mean=mu, sd=1))
#| label: setup
#| echo: false
library(tidyverse)
#| label: geracao-dados
### Gerando dados "observados"
set.seed(1.2024)
m.obs <- 100000
dados <- tibble(x1.obs=runif(m.obs, -3, 3),
x2.obs=runif(m.obs, -3, 3)) %>%
mutate(mu=abs(x1.obsˆ3 - 30*sin(x2.obs) + 10),
y=rnorm(m.obs, mean=mu, sd=1))
### Gerando dados "observados"
set.seed(1.2024)
m.obs <- 100000
dados <- tibble(x1.obs=runif(m.obs, -3, 3),
x2.obs=runif(m.obs, -3, 3))
dados
#| label: geracao-dados
### Gerando dados "observados"
set.seed(1.2024)
m.obs <- 100000
dados <- tibble(x1.obs=runif(m.obs, -3, 3),
x2.obs=runif(m.obs, -3, 3)) %>%
mutate(mu=abs(x1.obs^3 - 30*sin(x2.obs) + 10),
y=rnorm(m.obs, mean=mu, sd=1))
dados
J.Loss <- function(dados, theta, target){
if(!is.matrix(dados)){
stop("Dados deve ser uma matriz.")
} else if (dim(dados)[2] != 2){
stop("Matriz de dados deve ter 2 colunas.")
} else if (!is.list(theta)){
stop("Theta deve ser uma lista com pesos e viéses.")
} else if (!is.numeric(target)){
stop("Target deve ser um vetor numérico.")
}
#itera sobre os dados a ffwd que criamos para criar yhat
yhat <- map_vec(dados, ~ffwd(., theta))
return(mean((target - yhat)^2)) #média ja entrega 1/m
}
sample(1:50, 50)
dados %>%
mutate(id = sample(row_number(dados),row_number(dados)))
glimpse(dados)
dados %>%
mutate(id = sample(1:row_number(dados),row_number(dados)))
dados %>%
mutate(id = sample(1:nrow(dados),nrow(dados)))
dados_id <- dados %>%
mutate(id = sample(1:nrow(dados),nrow(dados)))
dados_train <- dados_id %>% select(id <= 80000)
View(dados_id)
dados_train <- dados_id %>% filter(id <= 80000)
dados_test <- dados_id %>% filter(id > 80000)
dados_id <- dados %>%
#sortear aleatoriamente os índices
mutate(id = rowid_to_column())
?rowid_to_column
dados_id <- dados %>%
#sortear aleatoriamente os índices
mutate(id = rowid_to_column("id"))
dados_id <- dados %>%
#sortear aleatoriamente os índices
mutate(id = row_number())
dplyr::dados_id
dados_id <- dados %>%
#sortear aleatoriamente os índices
mutate(id = row_number())
dados_id
dados_train <- dados[1:80000,]
dados_test <- dados_id %>% filter(90000:,)
dados_test <- dados[90000:,]
dados_test <- dados[90000::,]
dados_test <- dados[90000:nrow(dados),]
dados_train <- dados[1:80000,]
dados_valid <- dados[80001:90000,]
dados_test <- dados[90000:nrow(dados),]
dados_test <- dados[90001:nrow(dados),]
rm(dados_id)
# transformamos os dados em matriz
x_train <- dados_train %>%
select(x1.obs, x2.obs) %>%
as.matrix()
View(x_train)
# transformamos os dados em matriz
x_test <- dados_test %>%
select(x1.obs, x2.obs) %>%
as.matrix()
View(x_test)
theta
# transformamos os dados em matriz
x_test <- dados_test %>%
select(x1.obs, x2.obs) %>%
as.matrix()
# separamos o target
y_test <- dados_test %>%
pull(y)
J.Loss(x_test, theta, y_test)
map_vec(dados, ~ffwd(., theta))
map_vec(x_test, ~ffwd(., theta))
#| label: setup
#| echo: false
library(tidyverse)
#| label: feed-forward
# Função de ativação
phi <- function(x) {1/(1 + exp(-x))}
# Função de previsão
ffwd <- function(x, theta) {
if(any(dim(theta[[1]]) != c(2, 2))){
stop("O primeiro elemento de theta deve ser uma matriz de pesos 2x2")
} else if(length(theta[[2]]) != 2){
stop("O segundo elemento de theta deve ser um vetor viés de tamanho 2")
} else if(any(dim(theta[[3]]) != c(2, 1))){
stop("O terceiro elemento de theta deve ser uma matriz de pesos 2x1")
} else if(length(theta[[4]]) != 1){
stop("O quarto elemento de theta deve ser um vetor viés de tamanho 1")
} else if(!is.vector(x) & length(x) != 2){
stop("O x deve ser um vetor de tamanho 2")
}
x <- as.matrix(x)
W1 <- theta[[1]]
b1 <- theta[[2]]
W2 <- theta[[3]]
b2 <- theta[[4]]
a1 <- t(W1)%*%x+b1
h <- phi(a1)
yhat <- t(W2)%*%h+b2
return(yhat)
}
#| label: feed-forward-aplicacao
#| depends: feed-forward
#| output: false
x <- c(1,1)
theta <- list(
matrix(c(0.1), nrow = 2, ncol = 2), #w1
c(0.1, 0.1), #b1
matrix(c(0.1), nrow = 2, ncol = 1), #w2
c(0.1) #b2
)
ffwd(x, theta)
# theta já foi gerado e será reaproveitado
rowwise(xtest) %>%
J.Loss(theta, y_test)
# theta já foi gerado e será reaproveitado
rowwise(x_test) %>%
J.Loss(theta, y_test)
# transformamos os dados em matriz
x_test <- dados_test %>%
select(x1.obs, x2.obs)
# theta já foi gerado e será reaproveitado
rowwise(x_test) %>%
J.Loss(theta, y_test)
#| label: loss-function
J.Loss <- function(dados, theta, target){
if(!is.matrix(dados)){
stop("Dados deve ser uma matriz.")
} else if (dim(dados)[2] != 2){
stop("Matriz de dados deve ter 2 colunas.")
} else if (!is.list(theta)){
stop("Theta deve ser uma lista com pesos e viéses.")
} else if (!is.numeric(target)){
stop("Target deve ser um vetor numérico.")
}
#itera sobre os dados a ffwd que criamos para criar yhat
yhat <- map_vec(dados, ~ffwd(., theta))
return(mean((target - yhat)^2)) #média ja entrega 1/m
}
#| label: separacao-dados
#| depends: geracao-dados
dados_train <- dados[1:80000,]
dados_valid <- dados[80001:90000,]
dados_test <- dados[90001:nrow(dados),]
if(!is.data.frame(dados) | !is.tibble(dados)){
stop("Dados deve ser uma dataframe ou tibble.")
} else if (dim(dados)[2] != 2){
stop("Matriz de dados deve ter 2 colunas.")
} else if (!is.list(theta)){
stop("Theta deve ser uma lista com pesos e viéses.")
} else if (!is.numeric(target)){
stop("Target deve ser um vetor numérico.")
}
dados
test <- dados[, c(1,2)]
test %>%
rowwise() %>%
mutate(yhat = ffwd(everything(), theta))
test %>%
rowwise() %>%
mutate(yhat = across(everything(), ~ffwd(., theta)))
test %>%
rowwise()
test %>%
rowwise() %>%
mutate(yhat = ffwd(., theta)))
test %>%
rowwise() %>%
mutate(yhat = ffwd(., theta))
test <- matrix(1:4, nrow = 2)
test
test[1,]
t(test[1,])
dados
nrow(dados)
double(nrow(dados))
#calcula loss para cada linha dos dados, as linhas devem ser vetores
yhat <- double(nrow(dados))
for(i in 1:nrow(dados)){
yhat[i] <- ffwd(dados[i,], theta)
}
dados[i,]
test
x_test
for(i in 1:nrow(dados)){
yhat[i] <- ffwd(x_test[i,], theta)
}
x_test[1,]
x <- x_test[1,]
x <- as.matrix(x)
x
dim(x)
# Função de previsão
ffwd <- function(x, theta) {
if(any(dim(theta[[1]]) != c(2, 2))){
stop("O primeiro elemento de theta deve ser uma matriz de pesos 2x2")
} else if(length(theta[[2]]) != 2){
stop("O segundo elemento de theta deve ser um vetor viés de tamanho 2")
} else if(any(dim(theta[[3]]) != c(2, 1))){
stop("O terceiro elemento de theta deve ser uma matriz de pesos 2x1")
} else if(length(theta[[4]]) != 1){
stop("O quarto elemento de theta deve ser um vetor viés de tamanho 1")
} else if(!is.vector(x) & length(x) != 2){
stop("O x deve ser um vetor de tamanho 2")
}
x <- as.vector(x)
W1 <- theta[[1]]
b1 <- theta[[2]]
W2 <- theta[[3]]
b2 <- theta[[4]]
a1 <- t(W1)%*%x+b1
h <- phi(a1)
yhat <- t(W2)%*%h+b2
return(yhat)
}
x
as.vector(x)
x <- as.vector(x)
W1 <- theta[[1]]
b1 <- theta[[2]]
W2 <- theta[[3]]
b2 <- theta[[4]]
a1 <- t(W1)%*%x+b1
h <- phi(a1)
yhat <- t(W2)%*%h+b2
return(yhat)
yhat
#calcula loss para cada linha dos dados, as linhas devem ser vetores
yhat <- double(nrow(dados))
for(i in 1:nrow(dados)){
yhat[i] <- ffwd(dados[i,], theta)
}
#calcula loss para cada linha dos dados, as linhas devem ser vetores
yhat <- double(nrow(dados))
for(i in 1:nrow(dados)){
yhat[i] <- ffwd(x_test[i,], theta)
}
x_test[i,]
i
x <- x_test[i,]
head(yhat)
x
as.vector(x)
x_test
t(as.matrix(x_test))
tx_test <- t(as.matrix(x_test))
View(tx_test)
tx_test[,i]
test <- tx_test[,i]
x <- as.vector(x)
W1 <- theta[[1]]
b1 <- theta[[2]]
W2 <- theta[[3]]
b2 <- theta[[4]]
a1 <- t(W1)%*%x+b1
h <- phi(a1)
a1 <- t(W1)%*%x+b1
a1 <- (t(W1)%*%x)+b1
x
tx_test[,i]
x <- tx_test[,i]
as.vector(x)
x <- as.vector(x)
W1 <- theta[[1]]
b1 <- theta[[2]]
W2 <- theta[[3]]
b2 <- theta[[4]]
a1 <- (t(W1)%*%x)+b1
h <- phi(a1)
yhat <- t(W2)%*%h+b2
yhat
# Função de previsão
ffwd <- function(x, theta) {
if(any(dim(theta[[1]]) != c(2, 2))){
stop("O primeiro elemento de theta deve ser uma matriz de pesos 2x2")
} else if(length(theta[[2]]) != 2){
stop("O segundo elemento de theta deve ser um vetor viés de tamanho 2")
} else if(any(dim(theta[[3]]) != c(2, 1))){
stop("O terceiro elemento de theta deve ser uma matriz de pesos 2x1")
} else if(length(theta[[4]]) != 1){
stop("O quarto elemento de theta deve ser um vetor viés de tamanho 1")
} else if(!is.vector(x) & length(x) != 2){
stop("O x deve ser um vetor de tamanho 2")
}
x <- as.vector(x)
W1 <- theta[[1]]
b1 <- theta[[2]]
W2 <- theta[[3]]
b2 <- theta[[4]]
a1 <- (t(W1)%*%x)+b1
h <- phi(a1)
yhat <- t(W2)%*%h+b2
return(yhat)
}
x
tx_test
#calcula loss para cada linha dos dados, as linhas devem ser vetores
yhat <- double(nrow(dados))
dados
for(i in 1:nrow(x_test)){
yhat[i] <- ffwd(tx_test[,i], theta)
}
yhat
mean((target - yhat)^2)
dados
mean((dados$y - yhat)^2)
gc()
#| label: setup
#| echo: false
library(tidyverse)
#| label: feed-forward
# Função de ativação
phi <- function(x) {1/(1 + exp(-x))}
# Função de previsão
ffwd <- function(x, theta) {
if(any(dim(theta[[1]]) != c(2, 2))){
stop("O primeiro elemento de theta deve ser uma matriz de pesos 2x2")
} else if(length(theta[[2]]) != 2){
stop("O segundo elemento de theta deve ser um vetor viés de tamanho 2")
} else if(any(dim(theta[[3]]) != c(2, 1))){
stop("O terceiro elemento de theta deve ser uma matriz de pesos 2x1")
} else if(length(theta[[4]]) != 1){
stop("O quarto elemento de theta deve ser um vetor viés de tamanho 1")
} else if(!is.vector(x) & length(x) != 2){
stop("O x deve ser um vetor de tamanho 2")
}
x <- as.vector(x)
W1 <- theta[[1]]
b1 <- theta[[2]]
W2 <- theta[[3]]
b2 <- theta[[4]]
a1 <- (t(W1)%*%x)+b1
h <- phi(a1)
yhat <- t(W2)%*%h+b2
return(yhat)
}
#| label: feed-forward-aplicacao
#| depends: feed-forward
#| output: false
x <- c(1,1)
theta <- list(
matrix(c(0.1), nrow = 2, ncol = 2), #w1
c(0.1, 0.1), #b1
matrix(c(0.1), nrow = 2, ncol = 1), #w2
c(0.1) #b2
)
ffwd(x, theta)
#| label: geracao-dados
### Gerando dados "observados"
set.seed(1.2024)
m.obs <- 100000
dados <- tibble(x1.obs=runif(m.obs, -3, 3),
x2.obs=runif(m.obs, -3, 3)) %>%
mutate(mu=abs(x1.obs^3 - 30*sin(x2.obs) + 10),
y=rnorm(m.obs, mean=mu, sd=1))
#| label: loss-function
J.Loss <- function(dados, theta, target){
if(!is.data.frame(dados) | !is.tibble(dados)){
stop("Dados deve ser uma dataframe ou tibble.")
} else if (dim(dados)[2] != 2){
stop("Matriz de dados deve ter 2 colunas.")
} else if (!is.list(theta)){
stop("Theta deve ser uma lista com pesos e viéses.")
} else if (!is.numeric(target)){
stop("Target deve ser um vetor numérico.")
}
#calcula loss para cada linha dos dados, as linhas devem ser vetores
yhat <- double(nrow(dados))
tdados <- t(as.matrix(dados))
for(i in 1:nrow(dados)){
yhat[i] <- ffwd(tdados[,i], theta)
}
return(mean((target - yhat)^2)) #média ja entrega 1/m
}
#| label: separacao-dados
#| depends: geracao-dados
dados_train <- dados[1:80000,]
dados_valid <- dados[80001:90000,]
dados_test <- dados[90001:nrow(dados),]
# transformamos os dados em matriz
x_test <- dados_test %>%
select(x1.obs, x2.obs)
# separamos o target
y_test <- dados_test %>%
pull(y)
J.Loss(x_test, theta, y_test)
J.Loss(x_test, theta, y_test)
theta
#| label: setup
#| echo: false
library(tidyverse)
#| label: feed-forward
# Função de ativação
phi <- function(x) {1/(1 + exp(-x))}
# Função de previsão
ffwd <- function(x, theta) {
if(any(dim(theta[[1]]) != c(2, 2))){
stop("O primeiro elemento de theta deve ser uma matriz de pesos 2x2 para a aplicação nos dados")
} else if(length(theta[[2]]) != 2){
stop("O segundo elemento de theta deve ser um vetor viés de tamanho 2 para somar aos dados")
} else if(any(dim(theta[[3]]) != c(2, 1))){
stop("O terceiro elemento de theta deve ser uma matriz de pesos 2x1 para aplicação na única camada h")
} else if(length(theta[[4]]) != 1){
stop("O quarto elemento de theta deve ser um vetor viés de tamanho 1 para soma na única camada h")
} else if(!is.vector(x) & length(x) != 2){
stop("O x deve ser um vetor de tamanho 2")
}
x <- as.vector(x)
W1 <- theta[[1]]
b1 <- theta[[2]]
W2 <- theta[[3]]
b2 <- theta[[4]]
a1 <- (t(W1)%*%x)+b1
h <- phi(a1)
yhat <- t(W2)%*%h+b2
return(yhat)
}
#| label: feed-forward-aplicacao
#| depends: feed-forward
#| output: false
x <- c(1,1)
theta <- list(
matrix(c(0.1), nrow = 2, ncol = 2), #w1
c(0.1, 0.1), #b1
matrix(c(0.1), nrow = 2, ncol = 1), #w2
c(0.1) #b2
)
ffwd(x, theta)
rm(x)
#| label: geracao-dados
### Gerando dados "observados"
set.seed(1.2024)
m.obs <- 100000
dados <- tibble(x1.obs=runif(m.obs, -3, 3),
x2.obs=runif(m.obs, -3, 3)) %>%
mutate(mu=abs(x1.obs^3 - 30*sin(x2.obs) + 10),
y=rnorm(m.obs, mean=mu, sd=1))
#| label: loss-function
J.Loss <- function(dados, theta, target){
if(!is.data.frame(dados) | !is.tibble(dados)){
stop("Dados deve ser uma dataframe ou tibble.")
} else if (dim(dados)[2] != 2){
stop("Matriz de dados deve ter 2 colunas.")
} else if (!is.list(theta)){
stop("Theta deve ser uma lista com pesos e viéses.")
} else if (!is.numeric(target)){
stop("Target deve ser um vetor numérico.")
}
# aloca memoria para o tamanho dos dados
yhat <- double(nrow(dados))
# transpoe os dados para termos acesso aos vetores de x que serao passados para a primeira camada da rede
tdados <- t(as.matrix(dados))
for(i in 1:ncol(tdados)){
yhat[i] <- ffwd(tdados[,i], theta)
}
return(mean((target - yhat)^2)) #média ja entrega 1/m
}
#| label: separacao-dados
#| depends: geracao-dados
dados_train <- dados[1:80000,]
dados_valid <- dados[80001:90000,]
dados_test <- dados[90001:nrow(dados),]
#| label: custo-rede
#| depends: feed-forward, loss-function, separacao-dados
#| output: false
# transformamos os dados em matriz
x_test <- dados_test %>%
select(x1.obs, x2.obs)
# separamos o target
y_test <- dados_test %>%
pull(y)
# theta já foi gerado e será reaproveitado
J.Loss(x_test, theta, y_test)
