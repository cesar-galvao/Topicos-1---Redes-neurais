surface+
geom_point(aes(x = 0, y = 5), color = "red", size = 3, shape = 3)+
geom_point(aes(x = q1g[1], y = q1g[2]), color = "green", size = 3, shape = 13)
#| label: q1h
gradiente_RMSProp <- function(x0 = c(0,0), l.rate = 0.001, rho = 0.9, delta = 1e-6, steps = 100, keep = FALSE) {
if(keep == FALSE){
x <- x0
G <- 0
# loop padrão
for (i in 1:steps) {
#update G
G <- rho * G + (1 - rho) * grad(x)^2
#parameter update (theta + delta*theta)
# theta = theta - l.rate / sqrt(G + delta) * grad
x <- x - l.rate / sqrt(G + delta) * grad(x)
}
} else {
# loop mantendo pontos intermediários
x <- matrix(NA, nrow = steps+1, ncol = 2)
x[1,] <- x0
G <- 0
for (i in 1:steps) {
#update G
G <- rho * G + (1 - rho) * grad(x)^2
x[i+1,] <- x[i,] - l.rate / sqrt(G + delta) * grad(x)
}
}
return(x)
}
q1h <- gradiente_RMSProp(x0 = c(0,5), keep = TRUE)
#| label: q1h
gradiente_RMSProp <- function(x0 = c(0,0), l.rate = 0.001, rho = 0.9, delta = 1e-6, steps = 100, keep = FALSE) {
if(keep == FALSE){
x <- x0
G <- 0
# loop padrão
for (i in 1:steps) {
#update G
G <- rho * G + (1 - rho) * grad(x)^2
#parameter update (theta + delta*theta)
# theta = theta - l.rate / sqrt(G + delta) * grad
x <- x - l.rate / sqrt(G + delta) * grad(x)
}
} else {
# loop mantendo pontos intermediários
x <- matrix(NA, nrow = steps+1, ncol = 2)
x[1,] <- x0
G <- 0
for (i in 1:steps) {
#update G
G <- rho * G + (1 - rho) * grad(x[i,])^2
x[i+1,] <- x[i,] - l.rate / sqrt(G + delta) * grad(x[i,])
}
}
return(x)
}
q1h <- gradiente_RMSProp(x0 = c(0,5), keep = TRUE)
surface+
geom_point(aes(x = 0, y = 5), color = "red", size = 3, shape = 3)+
geom_point(aes(x = q1h[1], y = q1h[2]), color = "green", size = 3, shape = 13)
q1h
gradiente_RMSProp(x0 = c(0,5))
#| label: q1h
gradiente_RMSProp <- function(x0 = c(0,0), l.rate = 0.001, rho = 0.9, delta = 1e-6, steps = 100, keep = FALSE) {
if(keep == FALSE){
x <- x0
G <- 0
# loop padrão
for (i in 1:steps) {
#update G
G <- rho * G + (1 - rho) * grad(x)^2
#parameter update (theta + delta*theta)
# theta = theta - l.rate / sqrt(G + delta) * grad
x <- x - l.rate / sqrt(G + delta) * grad(x)
}
} else {
# loop mantendo pontos intermediários
x <- matrix(NA, nrow = steps+1, ncol = 2)
x[1,] <- x0
G <- 0
for (i in 1:steps) {
#update G
G <- rho * G + (1 - rho) * grad(x[i,])^2
x[i+1,] <- x[i,] - l.rate / sqrt(G + delta) * grad(x[i,])
}
}
return(x)
}
q1h <- gradiente_RMSProp(x0 = c(0,5), keep = TRUE)
surface+
geom_point(aes(x = 0, y = 5), color = "red", size = 3, shape = 3)+
geom_point(aes(x = q1h[1], y = q1h[2]), color = "green", size = 3, shape = 13)
q1h
#| label: q1h
gradiente_RMSProp <- function(x0 = c(0,0), l.rate = 0.001, rho = 0.9, delta = 1e-6, steps = 100, keep = FALSE) {
if(keep == FALSE){
x <- x0
G <- 0
# loop padrão
for (i in 1:steps) {
#update G
G <- rho * G + (1 - rho) * grad(x)^2
#parameter update (theta + delta*theta)
# theta = theta - l.rate / sqrt(G + delta) * grad
x <- x - l.rate / sqrt(G + delta) * grad(x)
}
} else {
# loop mantendo pontos intermediários
x <- matrix(NA, nrow = steps+1, ncol = 2)
x[1,] <- x0
G <- 0
for (i in 1:steps) {
#update G
G <- rho * G + (1 - rho) * grad(x[i,])^2
x[i+1,] <- x[i,] - l.rate / sqrt(G + delta) * grad(x[i,])
}
}
return(x)
}
q1h <- gradiente_RMSProp(x0 = c(0,5), keep = TRUE)
q1h
surface+
geom_point(aes(x = 0, y = 5), color = "red", size = 3, shape = 3)
q1g
q1g <- gradiente_momento(x0 = c(0,5))
surface+
geom_point(aes(x = 0, y = 5), color = "red", size = 3, shape = 3)+
geom_point(aes(x = q1g[1], y = q1g[2]), color = "green", size = 3, shape = 13)
q1h <- gradiente_RMSProp(x0 = c(0,5), keep = FALSE)
surface+
geom_point(aes(x = 0, y = 5), color = "red", size = 3, shape = 3)+
geom_point(aes(x = q1h[1], y = q1h[2]), color = "green", size = 3, shape = 13)
#| label: q1h
gradiente_RMSProp <- function(x0 = c(0,0), l.rate = 0.001, rho = 0.9, delta = 10^(-6), steps = 100, keep = FALSE) {
if(keep == FALSE){
x <- x0
G <- 0
# loop padrão
for (i in 1:steps) {
#update G
G <- rho * G + (1 - rho) * grad(x)^2
#parameter update (theta + delta*theta)
# theta = theta - l.rate / sqrt(G + delta) * grad
x <- x - l.rate / sqrt(G + delta) * grad(x)
}
} else {
# loop mantendo pontos intermediários
x <- matrix(NA, nrow = steps+1, ncol = 2)
x[1,] <- x0
G <- 0
for (i in 1:steps) {
#update G
G <- rho * G + (1 - rho) * grad(x[i,])^2
x[i+1,] <- x[i,] - l.rate / sqrt(G + delta) * grad(x[i,])
}
}
return(x)
}
q1h <- gradiente_RMSProp(x0 = c(0,5), keep = FALSE)
surface+
geom_point(aes(x = 0, y = 5), color = "red", size = 3, shape = 3)+
geom_point(aes(x = q1h[1], y = q1h[2]), color = "green", size = 3, shape = 13)
q1h
q1h <- gradiente_RMSProp(x0 = c(-1,-1), keep = FALSE)
surface+
geom_point(aes(x = 0, y = 5), color = "red", size = 3, shape = 3)+
geom_point(aes(x = q1h[1], y = q1h[2]), color = "green", size = 3, shape = 13)
q1h <- gradiente_RMSProp(x0 = c(-1,-1), keep = FALSE, steps = 1000)
surface+
geom_point(aes(x = 0, y = 5), color = "red", size = 3, shape = 3)+
geom_point(aes(x = q1h[1], y = q1h[2]), color = "green", size = 3, shape = 13)
q1h <- gradiente_RMSProp(x0 = c(-1,-1), keep = FALSE, steps = 1000000)
q1h <- gradiente_RMSProp(x0 = c(-1,-1), keep = FALSE, steps = 1000000)
surface+
geom_point(aes(x = 0, y = 5), color = "red", size = 3, shape = 3)+
geom_point(aes(x = q1h[1], y = q1h[2]), color = "green", size = 3, shape = 13)
q1h <- gradiente_RMSProp(x0 = c(0,5), keep = FALSE)
surface+
geom_point(aes(x = 0, y = 5), color = "red", size = 3, shape = 3)+
geom_point(aes(x = q1h[1], y = q1h[2]), color = "green", size = 3, shape = 13)
if(keep == FALSE){
x <- x0
# initialize moment variables
s <- 0
r <- 0
# loop padrão
for (i in 1:steps) {
#update first moment estimate
s <- rho1 * s + (1 - rho1) * grad(x)
# update second moment estimate
r <- rho2 * r + (1 - rho2) * grad(x)^2
#correct bias in first moment
s_hat <- s / (1 - rho1^i)
#correct bias in second moment
r_hat <- r / (1 - rho2^i)
#apply update (theta = theta + delta*theta)
# delta*theta = -l.rate*(s_hat) *(sqrt(r_hat) + delta)
x <- x - l.rate*s_hat / ((sqrt(r_hat) + delta))
}
} else {
# loop mantendo pontos intermediários
x <- matrix(NA, nrow = steps+1, ncol = 2)
x[1,] <- x0
s <- 0
r <- 0
for (i in 1:steps) {
#update m and v
s <- rho1 * m + (1 - rho1) * grad(x[i,])
r <- rho2 * v + (1 - rho2) * grad(x[i,])^2
#bias correction
s_hat <- m / (1 - rho1^i)
r_hat <- v / (1 - rho2^i)
#parameter update
x[i+1,] <- x[i,] - l.rate*s_hat / ((sqrt(r_hat) + delta))
}
}
#| label: q1i
gradiente_ADAM <- function(x0 = c(0,0), l.rate = 0.001, rho1 = 0.9, rho2 = 0.999, delta = 10^(-6), steps = 100, keep = FALSE) {
if(keep == FALSE){
x <- x0
# initialize moment variables
s <- 0
r <- 0
# loop padrão
for (i in 1:steps) {
#update first moment estimate
s <- rho1 * s + (1 - rho1) * grad(x)
# update second moment estimate
r <- rho2 * r + (1 - rho2) * grad(x)^2
#correct bias in first moment
s_hat <- s / (1 - rho1^i)
#correct bias in second moment
r_hat <- r / (1 - rho2^i)
#apply update (theta = theta + delta*theta)
# delta*theta = -l.rate*(s_hat) *(sqrt(r_hat) + delta)
x <- x - l.rate*s_hat / ((sqrt(r_hat) + delta))
}
} else {
# loop mantendo pontos intermediários
x <- matrix(NA, nrow = steps+1, ncol = 2)
x[1,] <- x0
s <- 0
r <- 0
for (i in 1:steps) {
#update m and v
s <- rho1 * m + (1 - rho1) * grad(x[i,])
r <- rho2 * v + (1 - rho2) * grad(x[i,])^2
#bias correction
s_hat <- m / (1 - rho1^i)
r_hat <- v / (1 - rho2^i)
#parameter update
x[i+1,] <- x[i,] - l.rate*s_hat / ((sqrt(r_hat) + delta))
}
}
return(x)
}
q1j <- gradiente_RMSProp(x0 = c(0,5), keep = FALSE)
q1j <- gradiente_ADAM(x0 = c(0,5), keep = FALSE)
surface+
geom_point(aes(x = 0, y = 5), color = "red", size = 3, shape = 3)+
geom_point(aes(x = q1j[1], y = q1j[2]), color = "green", size = 3, shape = 13)
q1j
#| label: fig-q1j
#| fig-cap: Caminhos percorridos pelas otimizações executadas nos itens d), g), h) e i)
bind_rows(
gradiente(x0 = c(0,5), l.rate = 0.01, steps = 100, keep = TRUE)
)
gradiente(x0 = c(0,5), l.rate = 0.01, steps = 100, keep = TRUE)
#| label: fig-q1j
#| fig-cap: Caminhos percorridos pelas otimizações executadas nos itens d), g), h) e i)
bind_rows(
as_tibble(gradiente(x0 = c(0,5), l.rate = 0.01, steps = 100, keep = TRUE))
)
#| label: fig-q1j
#| fig-cap: Caminhos percorridos pelas otimizações executadas nos itens d), g), h) e i)
bind_rows(
as_tibble(gradiente(x0 = c(0,5), keep = TRUE)),
as_tibble(gradiente_momento(x0 = c(0,5), keep = TRUE))
)
bind_rows(
as_tibble(gradiente(x0, keep = TRUE)),
as_tibble(gradiente_momento(x0, keep = TRUE)),
as_tibble(gradiente_RSMProp(x0, keep = TRUE)),
as_tibble(gradiente_ADAM(x0, keep = TRUE))
) %>%
mutate(
metodo = rep(c("GD", "Momento", "RSMProp", "Adam"), each = 101)
)
bind_rows(
as_tibble(gradiente(x0, keep = TRUE)),
as_tibble(gradiente_momento(x0, keep = TRUE)),
as_tibble(gradiente_RMSProp(x0, keep = TRUE)),
as_tibble(gradiente_ADAM(x0, keep = TRUE))
) %>%
mutate(
metodo = rep(c("GD", "Momento", "RSMProp", "Adam"), each = 101)
)
#| label: q1i
gradiente_ADAM <- function(x0 = c(0,0), l.rate = 0.001, rho1 = 0.9, rho2 = 0.999, delta = 10^(-6), steps = 100, keep = FALSE) {
if(keep == FALSE){
x <- x0
# initialize moment variables
s <- 0
r <- 0
# loop padrão
for (i in 1:steps) {
#update first moment estimate
s <- rho1 * s + (1 - rho1) * grad(x)
# update second moment estimate
r <- rho2 * r + (1 - rho2) * grad(x)^2
#correct bias in first moment
s_hat <- s / (1 - rho1^i)
#correct bias in second moment
r_hat <- r / (1 - rho2^i)
#apply update (theta = theta + delta*theta)
# delta*theta = -l.rate*(s_hat) *(sqrt(r_hat) + delta)
x <- x - l.rate*s_hat / ((sqrt(r_hat) + delta))
}
} else {
# loop mantendo pontos intermediários
x <- matrix(NA, nrow = steps+1, ncol = 2)
x[1,] <- x0
s <- 0
r <- 0
for (i in 1:steps) {
#update m and v
s <- rho1 * s + (1 - rho1) * grad(x[i,])
r <- rho2 * r + (1 - rho2) * grad(x[i,])^2
#bias correction
s_hat <- s / (1 - rho1^i)
r_hat <- r / (1 - rho2^i)
#parameter update
x[i+1,] <- x[i,] - l.rate*s_hat / ((sqrt(r_hat) + delta))
}
}
return(x)
}
q1j <- gradiente_ADAM(x0 = c(0,5), keep = FALSE)
surface+
geom_point(aes(x = 0, y = 5), color = "red", size = 3, shape = 3)+
geom_point(aes(x = q1j[1], y = q1j[2]), color = "green", size = 3, shape = 13)
#| label: fig-q1j
#| fig-cap: Caminhos percorridos pelas otimizações executadas nos itens d), g), h) e i)
x0 <- c(0,5)
bind_rows(
as_tibble(gradiente(x0, keep = TRUE)),
as_tibble(gradiente_momento(x0, keep = TRUE)),
as_tibble(gradiente_RMSProp(x0, keep = TRUE)),
as_tibble(gradiente_ADAM(x0, keep = TRUE))
) %>%
mutate(
metodo = rep(c("GD", "Momento", "RSMProp", "Adam"), each = 101)
)
paths <- bind_rows(
as_tibble(gradiente(x0, keep = TRUE)),
as_tibble(gradiente_momento(x0, keep = TRUE)),
as_tibble(gradiente_RMSProp(x0, keep = TRUE)),
as_tibble(gradiente_ADAM(x0, keep = TRUE))
) %>%
mutate(
metodo = rep(c("GD", "Momento", "RSMProp", "Adam"), each = 101)
) %>%
rlang::set_names("x1", "x2", "id")
ggplot() +
geom_contour_filled(data = df, aes(x = x1, y = x2, z = f)) +
geom_path(data = paths, aes(x = x1, y = x2, group = id), color = "yellow", linetype = "dotted")
ggplot() +
geom_contour_filled(data = df, aes(x = x1, y = x2, z = f)) +
geom_path(data = paths, aes(x = x1, y = x2, group = id), color = "yellow")
ggplot() +
geom_contour_filled(data = df, aes(x = x1, y = x2, z = f)) +
geom_path(data = paths, aes(x = x1, y = x2, group = id, color = id))
endpoints <- paths[c(101, 202, 303, 404),]
gradiente_endpoints
endpoints
ggplot() +
geom_contour_filled(data = df, aes(x = x1, y = x2, z = f)) +
geom_path(data = paths, aes(x = x1, y = x2, group = id, color = id)) +
geom_label(data = x0, aes(x = x1, y = x2, label = c(1:20)), color = "red", size = 2) +
geom_point(data = end_points, aes(x = x1, y = x2), color = "green", size = 2, shape = 13) +
labs(x = TeX("$x_1$"), y = TeX("$x_2$")) +
theme_minimal() +
theme(legend.position = "none",
panel.grid = element_blank(),
axis.title.y = element_text(angle = 0, vjust = 0.5))
ggplot() +
geom_contour_filled(data = df, aes(x = x1, y = x2, z = f)) +
geom_path(data = paths, aes(x = x1, y = x2, group = id, color = id)) +
#geom_label(data = x0, aes(x = x1, y = x2, label = c(1:20)), color = "red", size = 2) +
geom_point(data = end_points, aes(x = x1, y = x2), color = "green", size = 2, shape = 13) +
labs(x = TeX("$x_1$"), y = TeX("$x_2$")) +
theme_minimal() +
theme(legend.position = "none",
panel.grid = element_blank(),
axis.title.y = element_text(angle = 0, vjust = 0.5))
endpoints
ggplot() +
geom_contour_filled(data = df, aes(x = x1, y = x2, z = f)) +
geom_path(data = paths, aes(x = x1, y = x2, group = id, color = id)) +
#geom_label(data = x0, aes(x = x1, y = x2, label = c(1:20)), color = "red", size = 2) +
geom_point(data = endpoints, aes(x = x1, y = x2), color = "green", size = 2, shape = 13) +
labs(x = TeX("$x_1$"), y = TeX("$x_2$")) +
theme_minimal() +
theme(legend.position = "none",
panel.grid = element_blank(),
axis.title.y = element_text(angle = 0, vjust = 0.5))
ggplot() +
geom_contour_filled(data = df, aes(x = x1, y = x2, z = f)) +
geom_path(data = paths, aes(x = x1, y = x2, group = id, color = id)) +
geom_point(data = endpoints, aes(x = x1, y = x2), color = "green", size = 2, shape = 13) +
labs(x = TeX("$x_1$"), y = TeX("$x_2$")) +
theme_minimal() +
theme(panel.grid = element_blank(),
axis.title.y = element_text(angle = 0, vjust = 0.5))
paths <- bind_rows(
as_tibble(gradiente(x0, keep = TRUE)),
as_tibble(gradiente_momento(x0, keep = TRUE)),
as_tibble(gradiente_RMSProp(x0, keep = TRUE)),
as_tibble(gradiente_ADAM(x0, keep = TRUE))
) %>%
mutate(
metodo = rep(c("GD", "Momento", "RSMProp", "Adam"), each = 101)
) %>%
rlang::set_names("x1", "x2", "id")
endpoints <- paths[c(101, 202, 303, 404),]
endpoints
paths$id %>% unique
ggplot() +
geom_contour_filled(data = df, aes(x = x1, y = x2, z = f, show_legend = FALSE)) +
geom_path(data = paths, aes(x = x1, y = x2, group = id, color = id)) +
geom_point(data = endpoints, aes(x = x1, y = x2), color = "green", size = 2, shape = 13) +
labs(x = TeX("$x_1$"), y = TeX("$x_2$")) +
theme_minimal() +
theme(panel.grid = element_blank(),
axis.title.y = element_text(angle = 0, vjust = 0.5))
ggplot() +
geom_contour_filled(data = df, aes(x = x1, y = x2, z = f, show_level = FALSE)) +
geom_path(data = paths, aes(x = x1, y = x2, group = id, color = id)) +
geom_point(data = endpoints, aes(x = x1, y = x2), color = "green", size = 2, shape = 13) +
labs(x = TeX("$x_1$"), y = TeX("$x_2$")) +
theme_minimal() +
theme(panel.grid = element_blank(),
axis.title.y = element_text(angle = 0, vjust = 0.5))
ggplot() +
geom_contour_filled(data = df, aes(x = x1, y = x2, z = f, show.legend = FALSE)) +
geom_path(data = paths, aes(x = x1, y = x2, group = id, color = id)) +
geom_point(data = endpoints, aes(x = x1, y = x2), color = "green", size = 2, shape = 13) +
labs(x = TeX("$x_1$"), y = TeX("$x_2$")) +
theme_minimal() +
theme(panel.grid = element_blank(),
axis.title.y = element_text(angle = 0, vjust = 0.5))
ggplot() +
geom_contour_filled(data = df, aes(x = x1, y = x2, z = f), show.legend = FALSE) +
geom_path(data = paths, aes(x = x1, y = x2, group = id, color = id)) +
geom_point(data = endpoints, aes(x = x1, y = x2), color = "green", size = 2, shape = 13) +
labs(x = TeX("$x_1$"), y = TeX("$x_2$")) +
theme_minimal() +
theme(panel.grid = element_blank(),
axis.title.y = element_text(angle = 0, vjust = 0.5))
ggplot() +
geom_contour_filled(data = df, aes(x = x1, y = x2, z = f), show.legend = FALSE) +
geom_path(data = paths, aes(x = x1, y = x2, group = id, color = id)) +
geom_point(data = endpoints, aes(x = x1, y = x2), color = "green", size = 2, shape = 13) +
labs(x = TeX("$x_1$"), y = TeX("$x_2$"), color = "Otimização") +
theme_minimal() +
theme(panel.grid = element_blank(),
axis.title.y = element_text(angle = 0, vjust = 0.5))
ggplot() +
geom_contour_filled(data = df, aes(x = x1, y = x2, z = f), show.legend = FALSE) +
geom_path(data = paths, aes(x = x1, y = x2, group = id, color = id)) +
geom_point(data = endpoints, aes(x = x1, y = x2), color = "green", size = 2, shape = 13) +
labs(x = TeX("$x_1$"), y = TeX("$x_2$"), color = "Otimização") +
theme_minimal() +
theme(panel.grid = element_blank(),
axis.title.y = element_text(angle = 0, vjust = 0.5),
legend.position = "bottom")
#| label: q1h
gradiente_RMSProp <- function(x0 = c(0,0), l.rate = 0.001, rho = 0.9, delta = 10^(-6), steps = 100, keep = FALSE) {
if(keep == FALSE){
x <- x0
s <- 0
# loop padrão
for (i in 1:steps) {
#update s
s <- rho * s + (1 - rho) * grad(x)^2
#parameter update (theta + delta*theta)
# theta = theta - l.rate / sqrt(s + delta) * grad
x <- x - l.rate* grad(x) / sqrt(s + delta)
}
} else {
# loop mantendo pontos intermediários
x <- matrix(NA, nrow = steps+1, ncol = 2)
x[1,] <- x0
s <- 0
for (i in 1:steps) {
#update s
s <- rho * s + (1 - rho) * grad(x[i,])^2
x[i+1,] <- x[i,] - l.rate* grad(x[i,])/sqrt(s + delta)
}
}
return(x)
}
q1h <- gradiente_RMSProp(x0 = c(0,5), keep = FALSE)
surface+
geom_point(aes(x = 0, y = 5), color = "red", size = 3, shape = 3)+
geom_point(aes(x = q1h[1], y = q1h[2]), color = "green", size = 3, shape = 13)
geom_contour_filled(gradiente_RMSProp(x0, keep = TRUE, steps = 10000))
gradiente_RMSProp(x0, keep = TRUE, steps = 10000)
gradiente_RMSProp(x0, keep = TRUE, steps = 10000) %>% tail()
gradiente_RMSProp(x0, keep = TRUE, steps = 1000) %>% tail()
gradiente_RMSProp(x0, keep = TRUE, steps = 5000) %>% tail()
gradiente(x0, keep = TRUE)
